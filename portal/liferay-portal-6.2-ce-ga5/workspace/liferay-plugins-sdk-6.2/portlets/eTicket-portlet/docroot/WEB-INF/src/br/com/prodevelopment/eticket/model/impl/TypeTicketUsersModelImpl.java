/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.eticket.model.impl;

import br.com.prodevelopment.eticket.model.TypeTicketUsers;
import br.com.prodevelopment.eticket.model.TypeTicketUsersModel;
import br.com.prodevelopment.eticket.model.TypeTicketUsersSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TypeTicketUsers service. Represents a row in the &quot;TypeUsers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.com.prodevelopment.eticket.model.TypeTicketUsersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TypeTicketUsersImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see TypeTicketUsersImpl
 * @see br.com.prodevelopment.eticket.model.TypeTicketUsers
 * @see br.com.prodevelopment.eticket.model.TypeTicketUsersModel
 * @generated
 */
@JSON(strict = true)
public class TypeTicketUsersModelImpl extends BaseModelImpl<TypeTicketUsers>
	implements TypeTicketUsersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a type ticket users model instance should use the {@link br.com.prodevelopment.eticket.model.TypeTicketUsers} interface instead.
	 */
	public static final String TABLE_NAME = "TypeUsers";
	public static final Object[][] TABLE_COLUMNS = {
			{ "typeTicketUsersId", Types.BIGINT },
			{ "userIdCreate", Types.BIGINT },
			{ "userIdModified", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "typeTicketId", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table TypeUsers (typeTicketUsersId LONG not null primary key,userIdCreate LONG,userIdModified LONG,createDate DATE null,modifiedDate DATE null,typeTicketId LONG,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table TypeUsers";
	public static final String ORDER_BY_JPQL = " ORDER BY typeTicketUsers.typeTicketUsersId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TypeUsers.typeTicketUsersId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.br.com.prodevelopment.eticket.model.TypeTicketUsers"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.br.com.prodevelopment.eticket.model.TypeTicketUsers"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.br.com.prodevelopment.eticket.model.TypeTicketUsers"),
			true);
	public static long TYPETICKETID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long TYPETICKETUSERSID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TypeTicketUsers toModel(TypeTicketUsersSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TypeTicketUsers model = new TypeTicketUsersImpl();

		model.setTypeTicketUsersId(soapModel.getTypeTicketUsersId());
		model.setUserIdCreate(soapModel.getUserIdCreate());
		model.setUserIdModified(soapModel.getUserIdModified());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTypeTicketId(soapModel.getTypeTicketId());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TypeTicketUsers> toModels(
		TypeTicketUsersSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TypeTicketUsers> models = new ArrayList<TypeTicketUsers>(soapModels.length);

		for (TypeTicketUsersSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.br.com.prodevelopment.eticket.model.TypeTicketUsers"));

	public TypeTicketUsersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _typeTicketUsersId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTypeTicketUsersId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _typeTicketUsersId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TypeTicketUsers.class;
	}

	@Override
	public String getModelClassName() {
		return TypeTicketUsers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("typeTicketUsersId", getTypeTicketUsersId());
		attributes.put("userIdCreate", getUserIdCreate());
		attributes.put("userIdModified", getUserIdModified());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("typeTicketId", getTypeTicketId());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long typeTicketUsersId = (Long)attributes.get("typeTicketUsersId");

		if (typeTicketUsersId != null) {
			setTypeTicketUsersId(typeTicketUsersId);
		}

		Long userIdCreate = (Long)attributes.get("userIdCreate");

		if (userIdCreate != null) {
			setUserIdCreate(userIdCreate);
		}

		Long userIdModified = (Long)attributes.get("userIdModified");

		if (userIdModified != null) {
			setUserIdModified(userIdModified);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long typeTicketId = (Long)attributes.get("typeTicketId");

		if (typeTicketId != null) {
			setTypeTicketId(typeTicketId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public long getTypeTicketUsersId() {
		return _typeTicketUsersId;
	}

	@Override
	public void setTypeTicketUsersId(long typeTicketUsersId) {
		_columnBitmask = -1L;

		_typeTicketUsersId = typeTicketUsersId;
	}

	@JSON
	@Override
	public long getUserIdCreate() {
		return _userIdCreate;
	}

	@Override
	public void setUserIdCreate(long userIdCreate) {
		_userIdCreate = userIdCreate;
	}

	@JSON
	@Override
	public long getUserIdModified() {
		return _userIdModified;
	}

	@Override
	public void setUserIdModified(long userIdModified) {
		_userIdModified = userIdModified;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getTypeTicketId() {
		return _typeTicketId;
	}

	@Override
	public void setTypeTicketId(long typeTicketId) {
		_columnBitmask |= TYPETICKETID_COLUMN_BITMASK;

		if (!_setOriginalTypeTicketId) {
			_setOriginalTypeTicketId = true;

			_originalTypeTicketId = _typeTicketId;
		}

		_typeTicketId = typeTicketId;
	}

	public long getOriginalTypeTicketId() {
		return _originalTypeTicketId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TypeTicketUsers.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TypeTicketUsers toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TypeTicketUsers)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TypeTicketUsersImpl typeTicketUsersImpl = new TypeTicketUsersImpl();

		typeTicketUsersImpl.setTypeTicketUsersId(getTypeTicketUsersId());
		typeTicketUsersImpl.setUserIdCreate(getUserIdCreate());
		typeTicketUsersImpl.setUserIdModified(getUserIdModified());
		typeTicketUsersImpl.setCreateDate(getCreateDate());
		typeTicketUsersImpl.setModifiedDate(getModifiedDate());
		typeTicketUsersImpl.setTypeTicketId(getTypeTicketId());
		typeTicketUsersImpl.setUserId(getUserId());

		typeTicketUsersImpl.resetOriginalValues();

		return typeTicketUsersImpl;
	}

	@Override
	public int compareTo(TypeTicketUsers typeTicketUsers) {
		int value = 0;

		if (getTypeTicketUsersId() < typeTicketUsers.getTypeTicketUsersId()) {
			value = -1;
		}
		else if (getTypeTicketUsersId() > typeTicketUsers.getTypeTicketUsersId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TypeTicketUsers)) {
			return false;
		}

		TypeTicketUsers typeTicketUsers = (TypeTicketUsers)obj;

		long primaryKey = typeTicketUsers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TypeTicketUsersModelImpl typeTicketUsersModelImpl = this;

		typeTicketUsersModelImpl._originalTypeTicketId = typeTicketUsersModelImpl._typeTicketId;

		typeTicketUsersModelImpl._setOriginalTypeTicketId = false;

		typeTicketUsersModelImpl._originalUserId = typeTicketUsersModelImpl._userId;

		typeTicketUsersModelImpl._setOriginalUserId = false;

		typeTicketUsersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TypeTicketUsers> toCacheModel() {
		TypeTicketUsersCacheModel typeTicketUsersCacheModel = new TypeTicketUsersCacheModel();

		typeTicketUsersCacheModel.typeTicketUsersId = getTypeTicketUsersId();

		typeTicketUsersCacheModel.userIdCreate = getUserIdCreate();

		typeTicketUsersCacheModel.userIdModified = getUserIdModified();

		Date createDate = getCreateDate();

		if (createDate != null) {
			typeTicketUsersCacheModel.createDate = createDate.getTime();
		}
		else {
			typeTicketUsersCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			typeTicketUsersCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			typeTicketUsersCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		typeTicketUsersCacheModel.typeTicketId = getTypeTicketId();

		typeTicketUsersCacheModel.userId = getUserId();

		return typeTicketUsersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{typeTicketUsersId=");
		sb.append(getTypeTicketUsersId());
		sb.append(", userIdCreate=");
		sb.append(getUserIdCreate());
		sb.append(", userIdModified=");
		sb.append(getUserIdModified());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", typeTicketId=");
		sb.append(getTypeTicketId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("br.com.prodevelopment.eticket.model.TypeTicketUsers");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>typeTicketUsersId</column-name><column-value><![CDATA[");
		sb.append(getTypeTicketUsersId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdCreate</column-name><column-value><![CDATA[");
		sb.append(getUserIdCreate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdModified</column-name><column-value><![CDATA[");
		sb.append(getUserIdModified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeTicketId</column-name><column-value><![CDATA[");
		sb.append(getTypeTicketId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TypeTicketUsers.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TypeTicketUsers.class
		};
	private long _typeTicketUsersId;
	private long _userIdCreate;
	private long _userIdModified;
	private Date _createDate;
	private Date _modifiedDate;
	private long _typeTicketId;
	private long _originalTypeTicketId;
	private boolean _setOriginalTypeTicketId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private TypeTicketUsers _escapedModel;
}