/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.cliente.service.base;

import br.com.prodevelopment.cliente.model.ClienteLimCredito;
import br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalService;
import br.com.prodevelopment.cliente.service.persistence.ClienteLimCreditoPersistence;
import br.com.prodevelopment.cliente.service.persistence.ClientePersistence;
import br.com.prodevelopment.cliente.service.persistence.ClienteUsuarioPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cliente lim credito local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.prodevelopment.cliente.service.impl.ClienteLimCreditoLocalServiceImpl}.
 * </p>
 *
 * @author marcelo
 * @see br.com.prodevelopment.cliente.service.impl.ClienteLimCreditoLocalServiceImpl
 * @see br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalServiceUtil
 * @generated
 */
public abstract class ClienteLimCreditoLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ClienteLimCreditoLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalServiceUtil} to access the cliente lim credito local service.
	 */

	/**
	 * Adds the cliente lim credito to the database. Also notifies the appropriate model listeners.
	 *
	 * @param clienteLimCredito the cliente lim credito
	 * @return the cliente lim credito that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ClienteLimCredito addClienteLimCredito(
		ClienteLimCredito clienteLimCredito) throws SystemException {
		clienteLimCredito.setNew(true);

		return clienteLimCreditoPersistence.update(clienteLimCredito);
	}

	/**
	 * Creates a new cliente lim credito with the primary key. Does not add the cliente lim credito to the database.
	 *
	 * @param clienteLimCreditoId the primary key for the new cliente lim credito
	 * @return the new cliente lim credito
	 */
	@Override
	public ClienteLimCredito createClienteLimCredito(long clienteLimCreditoId) {
		return clienteLimCreditoPersistence.create(clienteLimCreditoId);
	}

	/**
	 * Deletes the cliente lim credito with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param clienteLimCreditoId the primary key of the cliente lim credito
	 * @return the cliente lim credito that was removed
	 * @throws PortalException if a cliente lim credito with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ClienteLimCredito deleteClienteLimCredito(long clienteLimCreditoId)
		throws PortalException, SystemException {
		return clienteLimCreditoPersistence.remove(clienteLimCreditoId);
	}

	/**
	 * Deletes the cliente lim credito from the database. Also notifies the appropriate model listeners.
	 *
	 * @param clienteLimCredito the cliente lim credito
	 * @return the cliente lim credito that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ClienteLimCredito deleteClienteLimCredito(
		ClienteLimCredito clienteLimCredito) throws SystemException {
		return clienteLimCreditoPersistence.remove(clienteLimCredito);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ClienteLimCredito.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return clienteLimCreditoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.cliente.model.impl.ClienteLimCreditoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return clienteLimCreditoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.cliente.model.impl.ClienteLimCreditoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return clienteLimCreditoPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return clienteLimCreditoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return clienteLimCreditoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ClienteLimCredito fetchClienteLimCredito(long clienteLimCreditoId)
		throws SystemException {
		return clienteLimCreditoPersistence.fetchByPrimaryKey(clienteLimCreditoId);
	}

	/**
	 * Returns the cliente lim credito with the primary key.
	 *
	 * @param clienteLimCreditoId the primary key of the cliente lim credito
	 * @return the cliente lim credito
	 * @throws PortalException if a cliente lim credito with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ClienteLimCredito getClienteLimCredito(long clienteLimCreditoId)
		throws PortalException, SystemException {
		return clienteLimCreditoPersistence.findByPrimaryKey(clienteLimCreditoId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return clienteLimCreditoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cliente lim creditos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.cliente.model.impl.ClienteLimCreditoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cliente lim creditos
	 * @param end the upper bound of the range of cliente lim creditos (not inclusive)
	 * @return the range of cliente lim creditos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ClienteLimCredito> getClienteLimCreditos(int start, int end)
		throws SystemException {
		return clienteLimCreditoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cliente lim creditos.
	 *
	 * @return the number of cliente lim creditos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getClienteLimCreditosCount() throws SystemException {
		return clienteLimCreditoPersistence.countAll();
	}

	/**
	 * Updates the cliente lim credito in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param clienteLimCredito the cliente lim credito
	 * @return the cliente lim credito that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ClienteLimCredito updateClienteLimCredito(
		ClienteLimCredito clienteLimCredito) throws SystemException {
		return clienteLimCreditoPersistence.update(clienteLimCredito);
	}

	/**
	 * Returns the cliente local service.
	 *
	 * @return the cliente local service
	 */
	public br.com.prodevelopment.cliente.service.ClienteLocalService getClienteLocalService() {
		return clienteLocalService;
	}

	/**
	 * Sets the cliente local service.
	 *
	 * @param clienteLocalService the cliente local service
	 */
	public void setClienteLocalService(
		br.com.prodevelopment.cliente.service.ClienteLocalService clienteLocalService) {
		this.clienteLocalService = clienteLocalService;
	}

	/**
	 * Returns the cliente remote service.
	 *
	 * @return the cliente remote service
	 */
	public br.com.prodevelopment.cliente.service.ClienteService getClienteService() {
		return clienteService;
	}

	/**
	 * Sets the cliente remote service.
	 *
	 * @param clienteService the cliente remote service
	 */
	public void setClienteService(
		br.com.prodevelopment.cliente.service.ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	/**
	 * Returns the cliente persistence.
	 *
	 * @return the cliente persistence
	 */
	public ClientePersistence getClientePersistence() {
		return clientePersistence;
	}

	/**
	 * Sets the cliente persistence.
	 *
	 * @param clientePersistence the cliente persistence
	 */
	public void setClientePersistence(ClientePersistence clientePersistence) {
		this.clientePersistence = clientePersistence;
	}

	/**
	 * Returns the cliente lim credito local service.
	 *
	 * @return the cliente lim credito local service
	 */
	public br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalService getClienteLimCreditoLocalService() {
		return clienteLimCreditoLocalService;
	}

	/**
	 * Sets the cliente lim credito local service.
	 *
	 * @param clienteLimCreditoLocalService the cliente lim credito local service
	 */
	public void setClienteLimCreditoLocalService(
		br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalService clienteLimCreditoLocalService) {
		this.clienteLimCreditoLocalService = clienteLimCreditoLocalService;
	}

	/**
	 * Returns the cliente lim credito remote service.
	 *
	 * @return the cliente lim credito remote service
	 */
	public br.com.prodevelopment.cliente.service.ClienteLimCreditoService getClienteLimCreditoService() {
		return clienteLimCreditoService;
	}

	/**
	 * Sets the cliente lim credito remote service.
	 *
	 * @param clienteLimCreditoService the cliente lim credito remote service
	 */
	public void setClienteLimCreditoService(
		br.com.prodevelopment.cliente.service.ClienteLimCreditoService clienteLimCreditoService) {
		this.clienteLimCreditoService = clienteLimCreditoService;
	}

	/**
	 * Returns the cliente lim credito persistence.
	 *
	 * @return the cliente lim credito persistence
	 */
	public ClienteLimCreditoPersistence getClienteLimCreditoPersistence() {
		return clienteLimCreditoPersistence;
	}

	/**
	 * Sets the cliente lim credito persistence.
	 *
	 * @param clienteLimCreditoPersistence the cliente lim credito persistence
	 */
	public void setClienteLimCreditoPersistence(
		ClienteLimCreditoPersistence clienteLimCreditoPersistence) {
		this.clienteLimCreditoPersistence = clienteLimCreditoPersistence;
	}

	/**
	 * Returns the cliente usuario local service.
	 *
	 * @return the cliente usuario local service
	 */
	public br.com.prodevelopment.cliente.service.ClienteUsuarioLocalService getClienteUsuarioLocalService() {
		return clienteUsuarioLocalService;
	}

	/**
	 * Sets the cliente usuario local service.
	 *
	 * @param clienteUsuarioLocalService the cliente usuario local service
	 */
	public void setClienteUsuarioLocalService(
		br.com.prodevelopment.cliente.service.ClienteUsuarioLocalService clienteUsuarioLocalService) {
		this.clienteUsuarioLocalService = clienteUsuarioLocalService;
	}

	/**
	 * Returns the cliente usuario remote service.
	 *
	 * @return the cliente usuario remote service
	 */
	public br.com.prodevelopment.cliente.service.ClienteUsuarioService getClienteUsuarioService() {
		return clienteUsuarioService;
	}

	/**
	 * Sets the cliente usuario remote service.
	 *
	 * @param clienteUsuarioService the cliente usuario remote service
	 */
	public void setClienteUsuarioService(
		br.com.prodevelopment.cliente.service.ClienteUsuarioService clienteUsuarioService) {
		this.clienteUsuarioService = clienteUsuarioService;
	}

	/**
	 * Returns the cliente usuario persistence.
	 *
	 * @return the cliente usuario persistence
	 */
	public ClienteUsuarioPersistence getClienteUsuarioPersistence() {
		return clienteUsuarioPersistence;
	}

	/**
	 * Sets the cliente usuario persistence.
	 *
	 * @param clienteUsuarioPersistence the cliente usuario persistence
	 */
	public void setClienteUsuarioPersistence(
		ClienteUsuarioPersistence clienteUsuarioPersistence) {
		this.clienteUsuarioPersistence = clienteUsuarioPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("br.com.prodevelopment.cliente.model.ClienteLimCredito",
			clienteLimCreditoLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.com.prodevelopment.cliente.model.ClienteLimCredito");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ClienteLimCredito.class;
	}

	protected String getModelClassName() {
		return ClienteLimCredito.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = clienteLimCreditoPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = br.com.prodevelopment.cliente.service.ClienteLocalService.class)
	protected br.com.prodevelopment.cliente.service.ClienteLocalService clienteLocalService;
	@BeanReference(type = br.com.prodevelopment.cliente.service.ClienteService.class)
	protected br.com.prodevelopment.cliente.service.ClienteService clienteService;
	@BeanReference(type = ClientePersistence.class)
	protected ClientePersistence clientePersistence;
	@BeanReference(type = br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalService.class)
	protected br.com.prodevelopment.cliente.service.ClienteLimCreditoLocalService clienteLimCreditoLocalService;
	@BeanReference(type = br.com.prodevelopment.cliente.service.ClienteLimCreditoService.class)
	protected br.com.prodevelopment.cliente.service.ClienteLimCreditoService clienteLimCreditoService;
	@BeanReference(type = ClienteLimCreditoPersistence.class)
	protected ClienteLimCreditoPersistence clienteLimCreditoPersistence;
	@BeanReference(type = br.com.prodevelopment.cliente.service.ClienteUsuarioLocalService.class)
	protected br.com.prodevelopment.cliente.service.ClienteUsuarioLocalService clienteUsuarioLocalService;
	@BeanReference(type = br.com.prodevelopment.cliente.service.ClienteUsuarioService.class)
	protected br.com.prodevelopment.cliente.service.ClienteUsuarioService clienteUsuarioService;
	@BeanReference(type = ClienteUsuarioPersistence.class)
	protected ClienteUsuarioPersistence clienteUsuarioPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ClienteLimCreditoLocalServiceClpInvoker _clpInvoker = new ClienteLimCreditoLocalServiceClpInvoker();
}