/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.etask.model.impl;

import br.com.prodevelopment.etask.model.TypeTaskUsers;
import br.com.prodevelopment.etask.model.TypeTaskUsersModel;
import br.com.prodevelopment.etask.model.TypeTaskUsersSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TypeTaskUsers service. Represents a row in the &quot;etsk_TypeTaskUsers&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.com.prodevelopment.etask.model.TypeTaskUsersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TypeTaskUsersImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see TypeTaskUsersImpl
 * @see br.com.prodevelopment.etask.model.TypeTaskUsers
 * @see br.com.prodevelopment.etask.model.TypeTaskUsersModel
 * @generated
 */
@JSON(strict = true)
public class TypeTaskUsersModelImpl extends BaseModelImpl<TypeTaskUsers>
	implements TypeTaskUsersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a type task users model instance should use the {@link br.com.prodevelopment.etask.model.TypeTaskUsers} interface instead.
	 */
	public static final String TABLE_NAME = "etsk_TypeTaskUsers";
	public static final Object[][] TABLE_COLUMNS = {
			{ "typeTaskUsersId", Types.BIGINT },
			{ "userIdCreate", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "typeTaskId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "typeUser", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table etsk_TypeTaskUsers (typeTaskUsersId LONG not null primary key,userIdCreate LONG,createDate DATE null,typeTaskId LONG,userId LONG,typeUser VARCHAR(2) null)";
	public static final String TABLE_SQL_DROP = "drop table etsk_TypeTaskUsers";
	public static final String ORDER_BY_JPQL = " ORDER BY typeTaskUsers.typeTaskUsersId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY etsk_TypeTaskUsers.typeTaskUsersId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.br.com.prodevelopment.etask.model.TypeTaskUsers"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.br.com.prodevelopment.etask.model.TypeTaskUsers"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.br.com.prodevelopment.etask.model.TypeTaskUsers"),
			true);
	public static long TYPETASKID_COLUMN_BITMASK = 1L;
	public static long TYPEUSER_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long TYPETASKUSERSID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TypeTaskUsers toModel(TypeTaskUsersSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TypeTaskUsers model = new TypeTaskUsersImpl();

		model.setTypeTaskUsersId(soapModel.getTypeTaskUsersId());
		model.setUserIdCreate(soapModel.getUserIdCreate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setTypeTaskId(soapModel.getTypeTaskId());
		model.setUserId(soapModel.getUserId());
		model.setTypeUser(soapModel.getTypeUser());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TypeTaskUsers> toModels(TypeTaskUsersSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TypeTaskUsers> models = new ArrayList<TypeTaskUsers>(soapModels.length);

		for (TypeTaskUsersSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.br.com.prodevelopment.etask.model.TypeTaskUsers"));

	public TypeTaskUsersModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _typeTaskUsersId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTypeTaskUsersId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _typeTaskUsersId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TypeTaskUsers.class;
	}

	@Override
	public String getModelClassName() {
		return TypeTaskUsers.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("typeTaskUsersId", getTypeTaskUsersId());
		attributes.put("userIdCreate", getUserIdCreate());
		attributes.put("createDate", getCreateDate());
		attributes.put("typeTaskId", getTypeTaskId());
		attributes.put("userId", getUserId());
		attributes.put("typeUser", getTypeUser());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long typeTaskUsersId = (Long)attributes.get("typeTaskUsersId");

		if (typeTaskUsersId != null) {
			setTypeTaskUsersId(typeTaskUsersId);
		}

		Long userIdCreate = (Long)attributes.get("userIdCreate");

		if (userIdCreate != null) {
			setUserIdCreate(userIdCreate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long typeTaskId = (Long)attributes.get("typeTaskId");

		if (typeTaskId != null) {
			setTypeTaskId(typeTaskId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String typeUser = (String)attributes.get("typeUser");

		if (typeUser != null) {
			setTypeUser(typeUser);
		}
	}

	@JSON
	@Override
	public long getTypeTaskUsersId() {
		return _typeTaskUsersId;
	}

	@Override
	public void setTypeTaskUsersId(long typeTaskUsersId) {
		_columnBitmask = -1L;

		_typeTaskUsersId = typeTaskUsersId;
	}

	@JSON
	@Override
	public long getUserIdCreate() {
		return _userIdCreate;
	}

	@Override
	public void setUserIdCreate(long userIdCreate) {
		_userIdCreate = userIdCreate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getTypeTaskId() {
		return _typeTaskId;
	}

	@Override
	public void setTypeTaskId(long typeTaskId) {
		_columnBitmask |= TYPETASKID_COLUMN_BITMASK;

		if (!_setOriginalTypeTaskId) {
			_setOriginalTypeTaskId = true;

			_originalTypeTaskId = _typeTaskId;
		}

		_typeTaskId = typeTaskId;
	}

	public long getOriginalTypeTaskId() {
		return _originalTypeTaskId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getTypeUser() {
		if (_typeUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeUser;
		}
	}

	@Override
	public void setTypeUser(String typeUser) {
		_columnBitmask |= TYPEUSER_COLUMN_BITMASK;

		if (_originalTypeUser == null) {
			_originalTypeUser = _typeUser;
		}

		_typeUser = typeUser;
	}

	public String getOriginalTypeUser() {
		return GetterUtil.getString(_originalTypeUser);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TypeTaskUsers.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TypeTaskUsers toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TypeTaskUsers)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TypeTaskUsersImpl typeTaskUsersImpl = new TypeTaskUsersImpl();

		typeTaskUsersImpl.setTypeTaskUsersId(getTypeTaskUsersId());
		typeTaskUsersImpl.setUserIdCreate(getUserIdCreate());
		typeTaskUsersImpl.setCreateDate(getCreateDate());
		typeTaskUsersImpl.setTypeTaskId(getTypeTaskId());
		typeTaskUsersImpl.setUserId(getUserId());
		typeTaskUsersImpl.setTypeUser(getTypeUser());

		typeTaskUsersImpl.resetOriginalValues();

		return typeTaskUsersImpl;
	}

	@Override
	public int compareTo(TypeTaskUsers typeTaskUsers) {
		int value = 0;

		if (getTypeTaskUsersId() < typeTaskUsers.getTypeTaskUsersId()) {
			value = -1;
		}
		else if (getTypeTaskUsersId() > typeTaskUsers.getTypeTaskUsersId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TypeTaskUsers)) {
			return false;
		}

		TypeTaskUsers typeTaskUsers = (TypeTaskUsers)obj;

		long primaryKey = typeTaskUsers.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TypeTaskUsersModelImpl typeTaskUsersModelImpl = this;

		typeTaskUsersModelImpl._originalTypeTaskId = typeTaskUsersModelImpl._typeTaskId;

		typeTaskUsersModelImpl._setOriginalTypeTaskId = false;

		typeTaskUsersModelImpl._originalUserId = typeTaskUsersModelImpl._userId;

		typeTaskUsersModelImpl._setOriginalUserId = false;

		typeTaskUsersModelImpl._originalTypeUser = typeTaskUsersModelImpl._typeUser;

		typeTaskUsersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TypeTaskUsers> toCacheModel() {
		TypeTaskUsersCacheModel typeTaskUsersCacheModel = new TypeTaskUsersCacheModel();

		typeTaskUsersCacheModel.typeTaskUsersId = getTypeTaskUsersId();

		typeTaskUsersCacheModel.userIdCreate = getUserIdCreate();

		Date createDate = getCreateDate();

		if (createDate != null) {
			typeTaskUsersCacheModel.createDate = createDate.getTime();
		}
		else {
			typeTaskUsersCacheModel.createDate = Long.MIN_VALUE;
		}

		typeTaskUsersCacheModel.typeTaskId = getTypeTaskId();

		typeTaskUsersCacheModel.userId = getUserId();

		typeTaskUsersCacheModel.typeUser = getTypeUser();

		String typeUser = typeTaskUsersCacheModel.typeUser;

		if ((typeUser != null) && (typeUser.length() == 0)) {
			typeTaskUsersCacheModel.typeUser = null;
		}

		return typeTaskUsersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{typeTaskUsersId=");
		sb.append(getTypeTaskUsersId());
		sb.append(", userIdCreate=");
		sb.append(getUserIdCreate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", typeTaskId=");
		sb.append(getTypeTaskId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", typeUser=");
		sb.append(getTypeUser());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("br.com.prodevelopment.etask.model.TypeTaskUsers");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>typeTaskUsersId</column-name><column-value><![CDATA[");
		sb.append(getTypeTaskUsersId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdCreate</column-name><column-value><![CDATA[");
		sb.append(getUserIdCreate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeTaskId</column-name><column-value><![CDATA[");
		sb.append(getTypeTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeUser</column-name><column-value><![CDATA[");
		sb.append(getTypeUser());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TypeTaskUsers.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TypeTaskUsers.class
		};
	private long _typeTaskUsersId;
	private long _userIdCreate;
	private Date _createDate;
	private long _typeTaskId;
	private long _originalTypeTaskId;
	private boolean _setOriginalTypeTaskId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _typeUser;
	private String _originalTypeUser;
	private long _columnBitmask;
	private TypeTaskUsers _escapedModel;
}