/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.etask.service.base;

import br.com.prodevelopment.etask.model.TypeTaskUsers;
import br.com.prodevelopment.etask.service.TypeTaskUsersLocalService;
import br.com.prodevelopment.etask.service.persistence.TypeTaskPersistence;
import br.com.prodevelopment.etask.service.persistence.TypeTaskUsersPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the type task users local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.prodevelopment.etask.service.impl.TypeTaskUsersLocalServiceImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see br.com.prodevelopment.etask.service.impl.TypeTaskUsersLocalServiceImpl
 * @see br.com.prodevelopment.etask.service.TypeTaskUsersLocalServiceUtil
 * @generated
 */
public abstract class TypeTaskUsersLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements TypeTaskUsersLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.com.prodevelopment.etask.service.TypeTaskUsersLocalServiceUtil} to access the type task users local service.
	 */

	/**
	 * Adds the type task users to the database. Also notifies the appropriate model listeners.
	 *
	 * @param typeTaskUsers the type task users
	 * @return the type task users that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TypeTaskUsers addTypeTaskUsers(TypeTaskUsers typeTaskUsers)
		throws SystemException {
		typeTaskUsers.setNew(true);

		return typeTaskUsersPersistence.update(typeTaskUsers);
	}

	/**
	 * Creates a new type task users with the primary key. Does not add the type task users to the database.
	 *
	 * @param typeTaskUsersId the primary key for the new type task users
	 * @return the new type task users
	 */
	@Override
	public TypeTaskUsers createTypeTaskUsers(long typeTaskUsersId) {
		return typeTaskUsersPersistence.create(typeTaskUsersId);
	}

	/**
	 * Deletes the type task users with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param typeTaskUsersId the primary key of the type task users
	 * @return the type task users that was removed
	 * @throws PortalException if a type task users with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TypeTaskUsers deleteTypeTaskUsers(long typeTaskUsersId)
		throws PortalException, SystemException {
		return typeTaskUsersPersistence.remove(typeTaskUsersId);
	}

	/**
	 * Deletes the type task users from the database. Also notifies the appropriate model listeners.
	 *
	 * @param typeTaskUsers the type task users
	 * @return the type task users that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TypeTaskUsers deleteTypeTaskUsers(TypeTaskUsers typeTaskUsers)
		throws SystemException {
		return typeTaskUsersPersistence.remove(typeTaskUsers);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TypeTaskUsers.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return typeTaskUsersPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.etask.model.impl.TypeTaskUsersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return typeTaskUsersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.etask.model.impl.TypeTaskUsersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return typeTaskUsersPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return typeTaskUsersPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return typeTaskUsersPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TypeTaskUsers fetchTypeTaskUsers(long typeTaskUsersId)
		throws SystemException {
		return typeTaskUsersPersistence.fetchByPrimaryKey(typeTaskUsersId);
	}

	/**
	 * Returns the type task users with the primary key.
	 *
	 * @param typeTaskUsersId the primary key of the type task users
	 * @return the type task users
	 * @throws PortalException if a type task users with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public TypeTaskUsers getTypeTaskUsers(long typeTaskUsersId)
		throws PortalException, SystemException {
		return typeTaskUsersPersistence.findByPrimaryKey(typeTaskUsersId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return typeTaskUsersPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the type task userses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.etask.model.impl.TypeTaskUsersModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of type task userses
	 * @param end the upper bound of the range of type task userses (not inclusive)
	 * @return the range of type task userses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<TypeTaskUsers> getTypeTaskUserses(int start, int end)
		throws SystemException {
		return typeTaskUsersPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of type task userses.
	 *
	 * @return the number of type task userses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getTypeTaskUsersesCount() throws SystemException {
		return typeTaskUsersPersistence.countAll();
	}

	/**
	 * Updates the type task users in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param typeTaskUsers the type task users
	 * @return the type task users that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TypeTaskUsers updateTypeTaskUsers(TypeTaskUsers typeTaskUsers)
		throws SystemException {
		return typeTaskUsersPersistence.update(typeTaskUsers);
	}

	/**
	 * Returns the type task local service.
	 *
	 * @return the type task local service
	 */
	public br.com.prodevelopment.etask.service.TypeTaskLocalService getTypeTaskLocalService() {
		return typeTaskLocalService;
	}

	/**
	 * Sets the type task local service.
	 *
	 * @param typeTaskLocalService the type task local service
	 */
	public void setTypeTaskLocalService(
		br.com.prodevelopment.etask.service.TypeTaskLocalService typeTaskLocalService) {
		this.typeTaskLocalService = typeTaskLocalService;
	}

	/**
	 * Returns the type task remote service.
	 *
	 * @return the type task remote service
	 */
	public br.com.prodevelopment.etask.service.TypeTaskService getTypeTaskService() {
		return typeTaskService;
	}

	/**
	 * Sets the type task remote service.
	 *
	 * @param typeTaskService the type task remote service
	 */
	public void setTypeTaskService(
		br.com.prodevelopment.etask.service.TypeTaskService typeTaskService) {
		this.typeTaskService = typeTaskService;
	}

	/**
	 * Returns the type task persistence.
	 *
	 * @return the type task persistence
	 */
	public TypeTaskPersistence getTypeTaskPersistence() {
		return typeTaskPersistence;
	}

	/**
	 * Sets the type task persistence.
	 *
	 * @param typeTaskPersistence the type task persistence
	 */
	public void setTypeTaskPersistence(TypeTaskPersistence typeTaskPersistence) {
		this.typeTaskPersistence = typeTaskPersistence;
	}

	/**
	 * Returns the type task users local service.
	 *
	 * @return the type task users local service
	 */
	public br.com.prodevelopment.etask.service.TypeTaskUsersLocalService getTypeTaskUsersLocalService() {
		return typeTaskUsersLocalService;
	}

	/**
	 * Sets the type task users local service.
	 *
	 * @param typeTaskUsersLocalService the type task users local service
	 */
	public void setTypeTaskUsersLocalService(
		br.com.prodevelopment.etask.service.TypeTaskUsersLocalService typeTaskUsersLocalService) {
		this.typeTaskUsersLocalService = typeTaskUsersLocalService;
	}

	/**
	 * Returns the type task users remote service.
	 *
	 * @return the type task users remote service
	 */
	public br.com.prodevelopment.etask.service.TypeTaskUsersService getTypeTaskUsersService() {
		return typeTaskUsersService;
	}

	/**
	 * Sets the type task users remote service.
	 *
	 * @param typeTaskUsersService the type task users remote service
	 */
	public void setTypeTaskUsersService(
		br.com.prodevelopment.etask.service.TypeTaskUsersService typeTaskUsersService) {
		this.typeTaskUsersService = typeTaskUsersService;
	}

	/**
	 * Returns the type task users persistence.
	 *
	 * @return the type task users persistence
	 */
	public TypeTaskUsersPersistence getTypeTaskUsersPersistence() {
		return typeTaskUsersPersistence;
	}

	/**
	 * Sets the type task users persistence.
	 *
	 * @param typeTaskUsersPersistence the type task users persistence
	 */
	public void setTypeTaskUsersPersistence(
		TypeTaskUsersPersistence typeTaskUsersPersistence) {
		this.typeTaskUsersPersistence = typeTaskUsersPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("br.com.prodevelopment.etask.model.TypeTaskUsers",
			typeTaskUsersLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.com.prodevelopment.etask.model.TypeTaskUsers");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return TypeTaskUsers.class;
	}

	protected String getModelClassName() {
		return TypeTaskUsers.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = typeTaskUsersPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = br.com.prodevelopment.etask.service.TypeTaskLocalService.class)
	protected br.com.prodevelopment.etask.service.TypeTaskLocalService typeTaskLocalService;
	@BeanReference(type = br.com.prodevelopment.etask.service.TypeTaskService.class)
	protected br.com.prodevelopment.etask.service.TypeTaskService typeTaskService;
	@BeanReference(type = TypeTaskPersistence.class)
	protected TypeTaskPersistence typeTaskPersistence;
	@BeanReference(type = br.com.prodevelopment.etask.service.TypeTaskUsersLocalService.class)
	protected br.com.prodevelopment.etask.service.TypeTaskUsersLocalService typeTaskUsersLocalService;
	@BeanReference(type = br.com.prodevelopment.etask.service.TypeTaskUsersService.class)
	protected br.com.prodevelopment.etask.service.TypeTaskUsersService typeTaskUsersService;
	@BeanReference(type = TypeTaskUsersPersistence.class)
	protected TypeTaskUsersPersistence typeTaskUsersPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private TypeTaskUsersLocalServiceClpInvoker _clpInvoker = new TypeTaskUsersLocalServiceClpInvoker();
}