/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.academiahorario.service.base;

import br.com.prodevelopment.academiahorario.model.AcademiaHorario;
import br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalService;
import br.com.prodevelopment.academiahorario.service.persistence.AcademiaHorarioPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.social.service.persistence.SocialActivityPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the academia horario local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.prodevelopment.academiahorario.service.impl.AcademiaHorarioLocalServiceImpl}.
 * </p>
 *
 * @author Marcelo
 * @see br.com.prodevelopment.academiahorario.service.impl.AcademiaHorarioLocalServiceImpl
 * @see br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalServiceUtil
 * @generated
 */
public abstract class AcademiaHorarioLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AcademiaHorarioLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalServiceUtil} to access the academia horario local service.
	 */

	/**
	 * Adds the academia horario to the database. Also notifies the appropriate model listeners.
	 *
	 * @param academiaHorario the academia horario
	 * @return the academia horario that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AcademiaHorario addAcademiaHorario(AcademiaHorario academiaHorario)
		throws SystemException {
		academiaHorario.setNew(true);

		return academiaHorarioPersistence.update(academiaHorario);
	}

	/**
	 * Creates a new academia horario with the primary key. Does not add the academia horario to the database.
	 *
	 * @param academiaHorarioId the primary key for the new academia horario
	 * @return the new academia horario
	 */
	@Override
	public AcademiaHorario createAcademiaHorario(long academiaHorarioId) {
		return academiaHorarioPersistence.create(academiaHorarioId);
	}

	/**
	 * Deletes the academia horario with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param academiaHorarioId the primary key of the academia horario
	 * @return the academia horario that was removed
	 * @throws PortalException if a academia horario with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AcademiaHorario deleteAcademiaHorario(long academiaHorarioId)
		throws PortalException, SystemException {
		return academiaHorarioPersistence.remove(academiaHorarioId);
	}

	/**
	 * Deletes the academia horario from the database. Also notifies the appropriate model listeners.
	 *
	 * @param academiaHorario the academia horario
	 * @return the academia horario that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AcademiaHorario deleteAcademiaHorario(
		AcademiaHorario academiaHorario) throws SystemException {
		return academiaHorarioPersistence.remove(academiaHorario);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AcademiaHorario.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return academiaHorarioPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.academiahorario.model.impl.AcademiaHorarioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return academiaHorarioPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.academiahorario.model.impl.AcademiaHorarioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return academiaHorarioPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return academiaHorarioPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return academiaHorarioPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AcademiaHorario fetchAcademiaHorario(long academiaHorarioId)
		throws SystemException {
		return academiaHorarioPersistence.fetchByPrimaryKey(academiaHorarioId);
	}

	/**
	 * Returns the academia horario with the matching UUID and company.
	 *
	 * @param uuid the academia horario's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching academia horario, or <code>null</code> if a matching academia horario could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public AcademiaHorario fetchAcademiaHorarioByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return academiaHorarioPersistence.fetchByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the academia horario matching the UUID and group.
	 *
	 * @param uuid the academia horario's UUID
	 * @param groupId the primary key of the group
	 * @return the matching academia horario, or <code>null</code> if a matching academia horario could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public AcademiaHorario fetchAcademiaHorarioByUuidAndGroupId(String uuid,
		long groupId) throws SystemException {
		return academiaHorarioPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the academia horario with the primary key.
	 *
	 * @param academiaHorarioId the primary key of the academia horario
	 * @return the academia horario
	 * @throws PortalException if a academia horario with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public AcademiaHorario getAcademiaHorario(long academiaHorarioId)
		throws PortalException, SystemException {
		return academiaHorarioPersistence.findByPrimaryKey(academiaHorarioId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return academiaHorarioPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the academia horario with the matching UUID and company.
	 *
	 * @param uuid the academia horario's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching academia horario
	 * @throws PortalException if a matching academia horario could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public AcademiaHorario getAcademiaHorarioByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException, SystemException {
		return academiaHorarioPersistence.findByUuid_C_First(uuid, companyId,
			null);
	}

	/**
	 * Returns the academia horario matching the UUID and group.
	 *
	 * @param uuid the academia horario's UUID
	 * @param groupId the primary key of the group
	 * @return the matching academia horario
	 * @throws PortalException if a matching academia horario could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public AcademiaHorario getAcademiaHorarioByUuidAndGroupId(String uuid,
		long groupId) throws PortalException, SystemException {
		return academiaHorarioPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the academia horarios.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.academiahorario.model.impl.AcademiaHorarioModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of academia horarios
	 * @param end the upper bound of the range of academia horarios (not inclusive)
	 * @return the range of academia horarios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<AcademiaHorario> getAcademiaHorarios(int start, int end)
		throws SystemException {
		return academiaHorarioPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of academia horarios.
	 *
	 * @return the number of academia horarios
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getAcademiaHorariosCount() throws SystemException {
		return academiaHorarioPersistence.countAll();
	}

	/**
	 * Updates the academia horario in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param academiaHorario the academia horario
	 * @return the academia horario that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AcademiaHorario updateAcademiaHorario(
		AcademiaHorario academiaHorario) throws SystemException {
		return academiaHorarioPersistence.update(academiaHorario);
	}

	/**
	 * Returns the academia horario local service.
	 *
	 * @return the academia horario local service
	 */
	public br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalService getAcademiaHorarioLocalService() {
		return academiaHorarioLocalService;
	}

	/**
	 * Sets the academia horario local service.
	 *
	 * @param academiaHorarioLocalService the academia horario local service
	 */
	public void setAcademiaHorarioLocalService(
		br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalService academiaHorarioLocalService) {
		this.academiaHorarioLocalService = academiaHorarioLocalService;
	}

	/**
	 * Returns the academia horario remote service.
	 *
	 * @return the academia horario remote service
	 */
	public br.com.prodevelopment.academiahorario.service.AcademiaHorarioService getAcademiaHorarioService() {
		return academiaHorarioService;
	}

	/**
	 * Sets the academia horario remote service.
	 *
	 * @param academiaHorarioService the academia horario remote service
	 */
	public void setAcademiaHorarioService(
		br.com.prodevelopment.academiahorario.service.AcademiaHorarioService academiaHorarioService) {
		this.academiaHorarioService = academiaHorarioService;
	}

	/**
	 * Returns the academia horario persistence.
	 *
	 * @return the academia horario persistence
	 */
	public AcademiaHorarioPersistence getAcademiaHorarioPersistence() {
		return academiaHorarioPersistence;
	}

	/**
	 * Sets the academia horario persistence.
	 *
	 * @param academiaHorarioPersistence the academia horario persistence
	 */
	public void setAcademiaHorarioPersistence(
		AcademiaHorarioPersistence academiaHorarioPersistence) {
		this.academiaHorarioPersistence = academiaHorarioPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the social activity local service.
	 *
	 * @return the social activity local service
	 */
	public com.liferay.portlet.social.service.SocialActivityLocalService getSocialActivityLocalService() {
		return socialActivityLocalService;
	}

	/**
	 * Sets the social activity local service.
	 *
	 * @param socialActivityLocalService the social activity local service
	 */
	public void setSocialActivityLocalService(
		com.liferay.portlet.social.service.SocialActivityLocalService socialActivityLocalService) {
		this.socialActivityLocalService = socialActivityLocalService;
	}

	/**
	 * Returns the social activity remote service.
	 *
	 * @return the social activity remote service
	 */
	public com.liferay.portlet.social.service.SocialActivityService getSocialActivityService() {
		return socialActivityService;
	}

	/**
	 * Sets the social activity remote service.
	 *
	 * @param socialActivityService the social activity remote service
	 */
	public void setSocialActivityService(
		com.liferay.portlet.social.service.SocialActivityService socialActivityService) {
		this.socialActivityService = socialActivityService;
	}

	/**
	 * Returns the social activity persistence.
	 *
	 * @return the social activity persistence
	 */
	public SocialActivityPersistence getSocialActivityPersistence() {
		return socialActivityPersistence;
	}

	/**
	 * Sets the social activity persistence.
	 *
	 * @param socialActivityPersistence the social activity persistence
	 */
	public void setSocialActivityPersistence(
		SocialActivityPersistence socialActivityPersistence) {
		this.socialActivityPersistence = socialActivityPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("br.com.prodevelopment.academiahorario.model.AcademiaHorario",
			academiaHorarioLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.com.prodevelopment.academiahorario.model.AcademiaHorario");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return AcademiaHorario.class;
	}

	protected String getModelClassName() {
		return AcademiaHorario.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = academiaHorarioPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalService.class)
	protected br.com.prodevelopment.academiahorario.service.AcademiaHorarioLocalService academiaHorarioLocalService;
	@BeanReference(type = br.com.prodevelopment.academiahorario.service.AcademiaHorarioService.class)
	protected br.com.prodevelopment.academiahorario.service.AcademiaHorarioService academiaHorarioService;
	@BeanReference(type = AcademiaHorarioPersistence.class)
	protected AcademiaHorarioPersistence academiaHorarioPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = com.liferay.portlet.social.service.SocialActivityLocalService.class)
	protected com.liferay.portlet.social.service.SocialActivityLocalService socialActivityLocalService;
	@BeanReference(type = com.liferay.portlet.social.service.SocialActivityService.class)
	protected com.liferay.portlet.social.service.SocialActivityService socialActivityService;
	@BeanReference(type = SocialActivityPersistence.class)
	protected SocialActivityPersistence socialActivityPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private AcademiaHorarioLocalServiceClpInvoker _clpInvoker = new AcademiaHorarioLocalServiceClpInvoker();
}