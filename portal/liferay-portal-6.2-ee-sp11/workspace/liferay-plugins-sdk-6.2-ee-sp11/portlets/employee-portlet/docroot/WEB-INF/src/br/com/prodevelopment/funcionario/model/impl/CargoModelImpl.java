/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package br.com.prodevelopment.funcionario.model.impl;

import br.com.prodevelopment.funcionario.model.Cargo;
import br.com.prodevelopment.funcionario.model.CargoModel;
import br.com.prodevelopment.funcionario.model.CargoSoap;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Cargo service. Represents a row in the &quot;Cargo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.com.prodevelopment.funcionario.model.CargoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CargoImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see CargoImpl
 * @see br.com.prodevelopment.funcionario.model.Cargo
 * @see br.com.prodevelopment.funcionario.model.CargoModel
 * @generated
 */
@JSON(strict = true)
public class CargoModelImpl extends BaseModelImpl<Cargo> implements CargoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cargo model instance should use the {@link br.com.prodevelopment.funcionario.model.Cargo} interface instead.
	 */
	public static final String TABLE_NAME = "Cargo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "cargoId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createUserId", Types.BIGINT },
			{ "modifiedUserId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "nome", Types.VARCHAR },
			{ "versao", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table Cargo (uuid_ VARCHAR(75) null,cargoId LONG not null primary key,companyId LONG,groupId LONG,createUserId LONG,modifiedUserId LONG,createDate DATE null,modifiedDate DATE null,nome STRING null,versao DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table Cargo";
	public static final String ORDER_BY_JPQL = " ORDER BY cargo.nome ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Cargo.nome ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.br.com.prodevelopment.funcionario.model.Cargo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.br.com.prodevelopment.funcionario.model.Cargo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.br.com.prodevelopment.funcionario.model.Cargo"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long NOME_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Cargo toModel(CargoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Cargo model = new CargoImpl();

		model.setUuid(soapModel.getUuid());
		model.setCargoId(soapModel.getCargoId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateUserId(soapModel.getCreateUserId());
		model.setModifiedUserId(soapModel.getModifiedUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNome(soapModel.getNome());
		model.setVersao(soapModel.getVersao());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Cargo> toModels(CargoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Cargo> models = new ArrayList<Cargo>(soapModels.length);

		for (CargoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.br.com.prodevelopment.funcionario.model.Cargo"));

	public CargoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cargoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCargoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cargoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Cargo.class;
	}

	@Override
	public String getModelClassName() {
		return Cargo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("cargoId", getCargoId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("modifiedUserId", getModifiedUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("nome", getNome());
		attributes.put("versao", getVersao());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long cargoId = (Long)attributes.get("cargoId");

		if (cargoId != null) {
			setCargoId(cargoId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long createUserId = (Long)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Long modifiedUserId = (Long)attributes.get("modifiedUserId");

		if (modifiedUserId != null) {
			setModifiedUserId(modifiedUserId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String nome = (String)attributes.get("nome");

		if (nome != null) {
			setNome(nome);
		}

		Double versao = (Double)attributes.get("versao");

		if (versao != null) {
			setVersao(versao);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCargoId() {
		return _cargoId;
	}

	@Override
	public void setCargoId(long cargoId) {
		_cargoId = cargoId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCreateUserId() {
		return _createUserId;
	}

	@Override
	public void setCreateUserId(long createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public String getCreateUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreateUserId(), "uuid",
			_createUserUuid);
	}

	@Override
	public void setCreateUserUuid(String createUserUuid) {
		_createUserUuid = createUserUuid;
	}

	@JSON
	@Override
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	@Override
	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	@Override
	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_modifiedUserUuid);
	}

	@Override
	public void setModifiedUserUuid(String modifiedUserUuid) {
		_modifiedUserUuid = modifiedUserUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return StringPool.BLANK;
		}
		else {
			return _nome;
		}
	}

	@Override
	public String getNome(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNome(languageId);
	}

	@Override
	public String getNome(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNome(languageId, useDefault);
	}

	@Override
	public String getNome(String languageId) {
		return LocalizationUtil.getLocalization(getNome(), languageId);
	}

	@Override
	public String getNome(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getNome(), languageId,
			useDefault);
	}

	@Override
	public String getNomeCurrentLanguageId() {
		return _nomeCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNomeCurrentValue() {
		Locale locale = getLocale(_nomeCurrentLanguageId);

		return getNome(locale);
	}

	@Override
	public Map<Locale, String> getNomeMap() {
		return LocalizationUtil.getLocalizationMap(getNome());
	}

	@Override
	public void setNome(String nome) {
		_columnBitmask = -1L;

		if (_originalNome == null) {
			_originalNome = _nome;
		}

		_nome = nome;
	}

	@Override
	public void setNome(String nome, Locale locale) {
		setNome(nome, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setNome(String nome, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(nome)) {
			setNome(LocalizationUtil.updateLocalization(getNome(), "Nome",
					nome, languageId, defaultLanguageId));
		}
		else {
			setNome(LocalizationUtil.removeLocalization(getNome(), "Nome",
					languageId));
		}
	}

	@Override
	public void setNomeCurrentLanguageId(String languageId) {
		_nomeCurrentLanguageId = languageId;
	}

	@Override
	public void setNomeMap(Map<Locale, String> nomeMap) {
		setNomeMap(nomeMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNomeMap(Map<Locale, String> nomeMap, Locale defaultLocale) {
		if (nomeMap == null) {
			return;
		}

		setNome(LocalizationUtil.updateLocalization(nomeMap, getNome(), "Nome",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalNome() {
		return GetterUtil.getString(_originalNome);
	}

	@JSON
	@Override
	public double getVersao() {
		return _versao;
	}

	@Override
	public void setVersao(double versao) {
		_versao = versao;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Cargo.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Cargo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nomeMap = getNomeMap();

		for (Map.Entry<Locale, String> entry : nomeMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getNome();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String nome = getNome(defaultLocale);

		if (Validator.isNull(nome)) {
			setNome(getNome(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setNome(getNome(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Cargo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Cargo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CargoImpl cargoImpl = new CargoImpl();

		cargoImpl.setUuid(getUuid());
		cargoImpl.setCargoId(getCargoId());
		cargoImpl.setCompanyId(getCompanyId());
		cargoImpl.setGroupId(getGroupId());
		cargoImpl.setCreateUserId(getCreateUserId());
		cargoImpl.setModifiedUserId(getModifiedUserId());
		cargoImpl.setCreateDate(getCreateDate());
		cargoImpl.setModifiedDate(getModifiedDate());
		cargoImpl.setNome(getNome());
		cargoImpl.setVersao(getVersao());

		cargoImpl.resetOriginalValues();

		return cargoImpl;
	}

	@Override
	public int compareTo(Cargo cargo) {
		int value = 0;

		value = getNome().compareTo(cargo.getNome());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cargo)) {
			return false;
		}

		Cargo cargo = (Cargo)obj;

		long primaryKey = cargo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CargoModelImpl cargoModelImpl = this;

		cargoModelImpl._originalUuid = cargoModelImpl._uuid;

		cargoModelImpl._originalCompanyId = cargoModelImpl._companyId;

		cargoModelImpl._setOriginalCompanyId = false;

		cargoModelImpl._originalGroupId = cargoModelImpl._groupId;

		cargoModelImpl._setOriginalGroupId = false;

		cargoModelImpl._originalNome = cargoModelImpl._nome;

		cargoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Cargo> toCacheModel() {
		CargoCacheModel cargoCacheModel = new CargoCacheModel();

		cargoCacheModel.uuid = getUuid();

		String uuid = cargoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cargoCacheModel.uuid = null;
		}

		cargoCacheModel.cargoId = getCargoId();

		cargoCacheModel.companyId = getCompanyId();

		cargoCacheModel.groupId = getGroupId();

		cargoCacheModel.createUserId = getCreateUserId();

		cargoCacheModel.modifiedUserId = getModifiedUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cargoCacheModel.createDate = createDate.getTime();
		}
		else {
			cargoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cargoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cargoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cargoCacheModel.nome = getNome();

		String nome = cargoCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			cargoCacheModel.nome = null;
		}

		cargoCacheModel.versao = getVersao();

		return cargoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", cargoId=");
		sb.append(getCargoId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", modifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", nome=");
		sb.append(getNome());
		sb.append(", versao=");
		sb.append(getVersao());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("br.com.prodevelopment.funcionario.model.Cargo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoId</column-name><column-value><![CDATA[");
		sb.append(getCargoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome</column-name><column-value><![CDATA[");
		sb.append(getNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versao</column-name><column-value><![CDATA[");
		sb.append(getVersao());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Cargo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Cargo.class };
	private String _uuid;
	private String _originalUuid;
	private long _cargoId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _createUserId;
	private String _createUserUuid;
	private long _modifiedUserId;
	private String _modifiedUserUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _nome;
	private String _nomeCurrentLanguageId;
	private String _originalNome;
	private double _versao;
	private long _columnBitmask;
	private Cargo _escapedModel;
}