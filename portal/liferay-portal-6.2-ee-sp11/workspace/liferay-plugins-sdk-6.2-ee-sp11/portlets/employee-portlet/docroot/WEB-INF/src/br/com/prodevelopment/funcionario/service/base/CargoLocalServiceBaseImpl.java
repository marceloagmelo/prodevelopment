/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package br.com.prodevelopment.funcionario.service.base;

import br.com.prodevelopment.funcionario.model.Cargo;
import br.com.prodevelopment.funcionario.service.CargoLocalService;
import br.com.prodevelopment.funcionario.service.persistence.CargoPersistence;
import br.com.prodevelopment.funcionario.service.persistence.FuncionarioPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetLinkPersistence;
import com.liferay.portlet.social.service.persistence.SocialActivityPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cargo local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.prodevelopment.funcionario.service.impl.CargoLocalServiceImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see br.com.prodevelopment.funcionario.service.impl.CargoLocalServiceImpl
 * @see br.com.prodevelopment.funcionario.service.CargoLocalServiceUtil
 * @generated
 */
public abstract class CargoLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CargoLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.com.prodevelopment.funcionario.service.CargoLocalServiceUtil} to access the cargo local service.
	 */

	/**
	 * Adds the cargo to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cargo the cargo
	 * @return the cargo that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Cargo addCargo(Cargo cargo) throws SystemException {
		cargo.setNew(true);

		return cargoPersistence.update(cargo);
	}

	/**
	 * Creates a new cargo with the primary key. Does not add the cargo to the database.
	 *
	 * @param cargoId the primary key for the new cargo
	 * @return the new cargo
	 */
	@Override
	public Cargo createCargo(long cargoId) {
		return cargoPersistence.create(cargoId);
	}

	/**
	 * Deletes the cargo with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cargoId the primary key of the cargo
	 * @return the cargo that was removed
	 * @throws PortalException if a cargo with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Cargo deleteCargo(long cargoId)
		throws PortalException, SystemException {
		return cargoPersistence.remove(cargoId);
	}

	/**
	 * Deletes the cargo from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cargo the cargo
	 * @return the cargo that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Cargo deleteCargo(Cargo cargo) throws SystemException {
		return cargoPersistence.remove(cargo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Cargo.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return cargoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.funcionario.model.impl.CargoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return cargoPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.funcionario.model.impl.CargoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return cargoPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return cargoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return cargoPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Cargo fetchCargo(long cargoId) throws SystemException {
		return cargoPersistence.fetchByPrimaryKey(cargoId);
	}

	/**
	 * Returns the cargo with the matching UUID and company.
	 *
	 * @param uuid the cargo's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching cargo, or <code>null</code> if a matching cargo could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Cargo fetchCargoByUuidAndCompanyId(String uuid, long companyId)
		throws SystemException {
		return cargoPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the cargo matching the UUID and group.
	 *
	 * @param uuid the cargo's UUID
	 * @param groupId the primary key of the group
	 * @return the matching cargo, or <code>null</code> if a matching cargo could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Cargo fetchCargoByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return cargoPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the cargo with the primary key.
	 *
	 * @param cargoId the primary key of the cargo
	 * @return the cargo
	 * @throws PortalException if a cargo with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Cargo getCargo(long cargoId) throws PortalException, SystemException {
		return cargoPersistence.findByPrimaryKey(cargoId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return cargoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the cargo with the matching UUID and company.
	 *
	 * @param uuid the cargo's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching cargo
	 * @throws PortalException if a matching cargo could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Cargo getCargoByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return cargoPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the cargo matching the UUID and group.
	 *
	 * @param uuid the cargo's UUID
	 * @param groupId the primary key of the group
	 * @return the matching cargo
	 * @throws PortalException if a matching cargo could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Cargo getCargoByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return cargoPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the cargos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link br.com.prodevelopment.funcionario.model.impl.CargoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cargos
	 * @param end the upper bound of the range of cargos (not inclusive)
	 * @return the range of cargos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Cargo> getCargos(int start, int end) throws SystemException {
		return cargoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cargos.
	 *
	 * @return the number of cargos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCargosCount() throws SystemException {
		return cargoPersistence.countAll();
	}

	/**
	 * Updates the cargo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cargo the cargo
	 * @return the cargo that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Cargo updateCargo(Cargo cargo) throws SystemException {
		return cargoPersistence.update(cargo);
	}

	/**
	 * Returns the cargo local service.
	 *
	 * @return the cargo local service
	 */
	public br.com.prodevelopment.funcionario.service.CargoLocalService getCargoLocalService() {
		return cargoLocalService;
	}

	/**
	 * Sets the cargo local service.
	 *
	 * @param cargoLocalService the cargo local service
	 */
	public void setCargoLocalService(
		br.com.prodevelopment.funcionario.service.CargoLocalService cargoLocalService) {
		this.cargoLocalService = cargoLocalService;
	}

	/**
	 * Returns the cargo remote service.
	 *
	 * @return the cargo remote service
	 */
	public br.com.prodevelopment.funcionario.service.CargoService getCargoService() {
		return cargoService;
	}

	/**
	 * Sets the cargo remote service.
	 *
	 * @param cargoService the cargo remote service
	 */
	public void setCargoService(
		br.com.prodevelopment.funcionario.service.CargoService cargoService) {
		this.cargoService = cargoService;
	}

	/**
	 * Returns the cargo persistence.
	 *
	 * @return the cargo persistence
	 */
	public CargoPersistence getCargoPersistence() {
		return cargoPersistence;
	}

	/**
	 * Sets the cargo persistence.
	 *
	 * @param cargoPersistence the cargo persistence
	 */
	public void setCargoPersistence(CargoPersistence cargoPersistence) {
		this.cargoPersistence = cargoPersistence;
	}

	/**
	 * Returns the funcionario local service.
	 *
	 * @return the funcionario local service
	 */
	public br.com.prodevelopment.funcionario.service.FuncionarioLocalService getFuncionarioLocalService() {
		return funcionarioLocalService;
	}

	/**
	 * Sets the funcionario local service.
	 *
	 * @param funcionarioLocalService the funcionario local service
	 */
	public void setFuncionarioLocalService(
		br.com.prodevelopment.funcionario.service.FuncionarioLocalService funcionarioLocalService) {
		this.funcionarioLocalService = funcionarioLocalService;
	}

	/**
	 * Returns the funcionario remote service.
	 *
	 * @return the funcionario remote service
	 */
	public br.com.prodevelopment.funcionario.service.FuncionarioService getFuncionarioService() {
		return funcionarioService;
	}

	/**
	 * Sets the funcionario remote service.
	 *
	 * @param funcionarioService the funcionario remote service
	 */
	public void setFuncionarioService(
		br.com.prodevelopment.funcionario.service.FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}

	/**
	 * Returns the funcionario persistence.
	 *
	 * @return the funcionario persistence
	 */
	public FuncionarioPersistence getFuncionarioPersistence() {
		return funcionarioPersistence;
	}

	/**
	 * Sets the funcionario persistence.
	 *
	 * @param funcionarioPersistence the funcionario persistence
	 */
	public void setFuncionarioPersistence(
		FuncionarioPersistence funcionarioPersistence) {
		this.funcionarioPersistence = funcionarioPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry remote service.
	 *
	 * @return the asset entry remote service
	 */
	public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
		return assetEntryService;
	}

	/**
	 * Sets the asset entry remote service.
	 *
	 * @param assetEntryService the asset entry remote service
	 */
	public void setAssetEntryService(
		com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
		this.assetEntryService = assetEntryService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset link local service.
	 *
	 * @return the asset link local service
	 */
	public com.liferay.portlet.asset.service.AssetLinkLocalService getAssetLinkLocalService() {
		return assetLinkLocalService;
	}

	/**
	 * Sets the asset link local service.
	 *
	 * @param assetLinkLocalService the asset link local service
	 */
	public void setAssetLinkLocalService(
		com.liferay.portlet.asset.service.AssetLinkLocalService assetLinkLocalService) {
		this.assetLinkLocalService = assetLinkLocalService;
	}

	/**
	 * Returns the asset link persistence.
	 *
	 * @return the asset link persistence
	 */
	public AssetLinkPersistence getAssetLinkPersistence() {
		return assetLinkPersistence;
	}

	/**
	 * Sets the asset link persistence.
	 *
	 * @param assetLinkPersistence the asset link persistence
	 */
	public void setAssetLinkPersistence(
		AssetLinkPersistence assetLinkPersistence) {
		this.assetLinkPersistence = assetLinkPersistence;
	}

	/**
	 * Returns the social activity local service.
	 *
	 * @return the social activity local service
	 */
	public com.liferay.portlet.social.service.SocialActivityLocalService getSocialActivityLocalService() {
		return socialActivityLocalService;
	}

	/**
	 * Sets the social activity local service.
	 *
	 * @param socialActivityLocalService the social activity local service
	 */
	public void setSocialActivityLocalService(
		com.liferay.portlet.social.service.SocialActivityLocalService socialActivityLocalService) {
		this.socialActivityLocalService = socialActivityLocalService;
	}

	/**
	 * Returns the social activity remote service.
	 *
	 * @return the social activity remote service
	 */
	public com.liferay.portlet.social.service.SocialActivityService getSocialActivityService() {
		return socialActivityService;
	}

	/**
	 * Sets the social activity remote service.
	 *
	 * @param socialActivityService the social activity remote service
	 */
	public void setSocialActivityService(
		com.liferay.portlet.social.service.SocialActivityService socialActivityService) {
		this.socialActivityService = socialActivityService;
	}

	/**
	 * Returns the social activity persistence.
	 *
	 * @return the social activity persistence
	 */
	public SocialActivityPersistence getSocialActivityPersistence() {
		return socialActivityPersistence;
	}

	/**
	 * Sets the social activity persistence.
	 *
	 * @param socialActivityPersistence the social activity persistence
	 */
	public void setSocialActivityPersistence(
		SocialActivityPersistence socialActivityPersistence) {
		this.socialActivityPersistence = socialActivityPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("br.com.prodevelopment.funcionario.model.Cargo",
			cargoLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.com.prodevelopment.funcionario.model.Cargo");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Cargo.class;
	}

	protected String getModelClassName() {
		return Cargo.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = cargoPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = br.com.prodevelopment.funcionario.service.CargoLocalService.class)
	protected br.com.prodevelopment.funcionario.service.CargoLocalService cargoLocalService;
	@BeanReference(type = br.com.prodevelopment.funcionario.service.CargoService.class)
	protected br.com.prodevelopment.funcionario.service.CargoService cargoService;
	@BeanReference(type = CargoPersistence.class)
	protected CargoPersistence cargoPersistence;
	@BeanReference(type = br.com.prodevelopment.funcionario.service.FuncionarioLocalService.class)
	protected br.com.prodevelopment.funcionario.service.FuncionarioLocalService funcionarioLocalService;
	@BeanReference(type = br.com.prodevelopment.funcionario.service.FuncionarioService.class)
	protected br.com.prodevelopment.funcionario.service.FuncionarioService funcionarioService;
	@BeanReference(type = FuncionarioPersistence.class)
	protected FuncionarioPersistence funcionarioPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
	protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
	protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
	@BeanReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetLinkLocalService.class)
	protected com.liferay.portlet.asset.service.AssetLinkLocalService assetLinkLocalService;
	@BeanReference(type = AssetLinkPersistence.class)
	protected AssetLinkPersistence assetLinkPersistence;
	@BeanReference(type = com.liferay.portlet.social.service.SocialActivityLocalService.class)
	protected com.liferay.portlet.social.service.SocialActivityLocalService socialActivityLocalService;
	@BeanReference(type = com.liferay.portlet.social.service.SocialActivityService.class)
	protected com.liferay.portlet.social.service.SocialActivityService socialActivityService;
	@BeanReference(type = SocialActivityPersistence.class)
	protected SocialActivityPersistence socialActivityPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CargoLocalServiceClpInvoker _clpInvoker = new CargoLocalServiceClpInvoker();
}