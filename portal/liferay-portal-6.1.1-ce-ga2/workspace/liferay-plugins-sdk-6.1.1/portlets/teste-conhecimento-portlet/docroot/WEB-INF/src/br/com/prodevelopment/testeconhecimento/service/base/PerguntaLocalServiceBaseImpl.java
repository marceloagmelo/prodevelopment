/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.prodevelopment.testeconhecimento.service.base;

import br.com.prodevelopment.testeconhecimento.model.Pergunta;
import br.com.prodevelopment.testeconhecimento.service.PerguntaLocalService;
import br.com.prodevelopment.testeconhecimento.service.RespostaLocalService;
import br.com.prodevelopment.testeconhecimento.service.Resposta_UsuarioLocalService;
import br.com.prodevelopment.testeconhecimento.service.TesteLocalService;
import br.com.prodevelopment.testeconhecimento.service.Teste_UsuarioLocalService;
import br.com.prodevelopment.testeconhecimento.service.persistence.PerguntaPersistence;
import br.com.prodevelopment.testeconhecimento.service.persistence.RespostaPersistence;
import br.com.prodevelopment.testeconhecimento.service.persistence.Resposta_UsuarioPersistence;
import br.com.prodevelopment.testeconhecimento.service.persistence.TestePersistence;
import br.com.prodevelopment.testeconhecimento.service.persistence.Teste_UsuarioPersistence;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the pergunta local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.prodevelopment.testeconhecimento.service.impl.PerguntaLocalServiceImpl}.
 * </p>
 *
 * @author Marcelo Melo
 * @see br.com.prodevelopment.testeconhecimento.service.impl.PerguntaLocalServiceImpl
 * @see br.com.prodevelopment.testeconhecimento.service.PerguntaLocalServiceUtil
 * @generated
 */
public abstract class PerguntaLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements PerguntaLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link br.com.prodevelopment.testeconhecimento.service.PerguntaLocalServiceUtil} to access the pergunta local service.
	 */

	/**
	 * Adds the pergunta to the database. Also notifies the appropriate model listeners.
	 *
	 * @param pergunta the pergunta
	 * @return the pergunta that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Pergunta addPergunta(Pergunta pergunta) throws SystemException {
		pergunta.setNew(true);

		return perguntaPersistence.update(pergunta, false);
	}

	/**
	 * Creates a new pergunta with the primary key. Does not add the pergunta to the database.
	 *
	 * @param id the primary key for the new pergunta
	 * @return the new pergunta
	 */
	public Pergunta createPergunta(long id) {
		return perguntaPersistence.create(id);
	}

	/**
	 * Deletes the pergunta with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the pergunta
	 * @return the pergunta that was removed
	 * @throws PortalException if a pergunta with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Pergunta deletePergunta(long id)
		throws PortalException, SystemException {
		return perguntaPersistence.remove(id);
	}

	/**
	 * Deletes the pergunta from the database. Also notifies the appropriate model listeners.
	 *
	 * @param pergunta the pergunta
	 * @return the pergunta that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Pergunta deletePergunta(Pergunta pergunta) throws SystemException {
		return perguntaPersistence.remove(pergunta);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Pergunta.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return perguntaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return perguntaPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return perguntaPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return perguntaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public Pergunta fetchPergunta(long id) throws SystemException {
		return perguntaPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the pergunta with the primary key.
	 *
	 * @param id the primary key of the pergunta
	 * @return the pergunta
	 * @throws PortalException if a pergunta with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Pergunta getPergunta(long id)
		throws PortalException, SystemException {
		return perguntaPersistence.findByPrimaryKey(id);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return perguntaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the perguntas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of perguntas
	 * @param end the upper bound of the range of perguntas (not inclusive)
	 * @return the range of perguntas
	 * @throws SystemException if a system exception occurred
	 */
	public List<Pergunta> getPerguntas(int start, int end)
		throws SystemException {
		return perguntaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of perguntas.
	 *
	 * @return the number of perguntas
	 * @throws SystemException if a system exception occurred
	 */
	public int getPerguntasCount() throws SystemException {
		return perguntaPersistence.countAll();
	}

	/**
	 * Updates the pergunta in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param pergunta the pergunta
	 * @return the pergunta that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Pergunta updatePergunta(Pergunta pergunta) throws SystemException {
		return updatePergunta(pergunta, true);
	}

	/**
	 * Updates the pergunta in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param pergunta the pergunta
	 * @param merge whether to merge the pergunta with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the pergunta that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Pergunta updatePergunta(Pergunta pergunta, boolean merge)
		throws SystemException {
		pergunta.setNew(false);

		return perguntaPersistence.update(pergunta, merge);
	}

	/**
	 * Returns the pergunta local service.
	 *
	 * @return the pergunta local service
	 */
	public PerguntaLocalService getPerguntaLocalService() {
		return perguntaLocalService;
	}

	/**
	 * Sets the pergunta local service.
	 *
	 * @param perguntaLocalService the pergunta local service
	 */
	public void setPerguntaLocalService(
		PerguntaLocalService perguntaLocalService) {
		this.perguntaLocalService = perguntaLocalService;
	}

	/**
	 * Returns the pergunta persistence.
	 *
	 * @return the pergunta persistence
	 */
	public PerguntaPersistence getPerguntaPersistence() {
		return perguntaPersistence;
	}

	/**
	 * Sets the pergunta persistence.
	 *
	 * @param perguntaPersistence the pergunta persistence
	 */
	public void setPerguntaPersistence(PerguntaPersistence perguntaPersistence) {
		this.perguntaPersistence = perguntaPersistence;
	}

	/**
	 * Returns the resposta local service.
	 *
	 * @return the resposta local service
	 */
	public RespostaLocalService getRespostaLocalService() {
		return respostaLocalService;
	}

	/**
	 * Sets the resposta local service.
	 *
	 * @param respostaLocalService the resposta local service
	 */
	public void setRespostaLocalService(
		RespostaLocalService respostaLocalService) {
		this.respostaLocalService = respostaLocalService;
	}

	/**
	 * Returns the resposta persistence.
	 *
	 * @return the resposta persistence
	 */
	public RespostaPersistence getRespostaPersistence() {
		return respostaPersistence;
	}

	/**
	 * Sets the resposta persistence.
	 *
	 * @param respostaPersistence the resposta persistence
	 */
	public void setRespostaPersistence(RespostaPersistence respostaPersistence) {
		this.respostaPersistence = respostaPersistence;
	}

	/**
	 * Returns the resposta_ usuario local service.
	 *
	 * @return the resposta_ usuario local service
	 */
	public Resposta_UsuarioLocalService getResposta_UsuarioLocalService() {
		return resposta_UsuarioLocalService;
	}

	/**
	 * Sets the resposta_ usuario local service.
	 *
	 * @param resposta_UsuarioLocalService the resposta_ usuario local service
	 */
	public void setResposta_UsuarioLocalService(
		Resposta_UsuarioLocalService resposta_UsuarioLocalService) {
		this.resposta_UsuarioLocalService = resposta_UsuarioLocalService;
	}

	/**
	 * Returns the resposta_ usuario persistence.
	 *
	 * @return the resposta_ usuario persistence
	 */
	public Resposta_UsuarioPersistence getResposta_UsuarioPersistence() {
		return resposta_UsuarioPersistence;
	}

	/**
	 * Sets the resposta_ usuario persistence.
	 *
	 * @param resposta_UsuarioPersistence the resposta_ usuario persistence
	 */
	public void setResposta_UsuarioPersistence(
		Resposta_UsuarioPersistence resposta_UsuarioPersistence) {
		this.resposta_UsuarioPersistence = resposta_UsuarioPersistence;
	}

	/**
	 * Returns the teste local service.
	 *
	 * @return the teste local service
	 */
	public TesteLocalService getTesteLocalService() {
		return testeLocalService;
	}

	/**
	 * Sets the teste local service.
	 *
	 * @param testeLocalService the teste local service
	 */
	public void setTesteLocalService(TesteLocalService testeLocalService) {
		this.testeLocalService = testeLocalService;
	}

	/**
	 * Returns the teste persistence.
	 *
	 * @return the teste persistence
	 */
	public TestePersistence getTestePersistence() {
		return testePersistence;
	}

	/**
	 * Sets the teste persistence.
	 *
	 * @param testePersistence the teste persistence
	 */
	public void setTestePersistence(TestePersistence testePersistence) {
		this.testePersistence = testePersistence;
	}

	/**
	 * Returns the teste_ usuario local service.
	 *
	 * @return the teste_ usuario local service
	 */
	public Teste_UsuarioLocalService getTeste_UsuarioLocalService() {
		return teste_UsuarioLocalService;
	}

	/**
	 * Sets the teste_ usuario local service.
	 *
	 * @param teste_UsuarioLocalService the teste_ usuario local service
	 */
	public void setTeste_UsuarioLocalService(
		Teste_UsuarioLocalService teste_UsuarioLocalService) {
		this.teste_UsuarioLocalService = teste_UsuarioLocalService;
	}

	/**
	 * Returns the teste_ usuario persistence.
	 *
	 * @return the teste_ usuario persistence
	 */
	public Teste_UsuarioPersistence getTeste_UsuarioPersistence() {
		return teste_UsuarioPersistence;
	}

	/**
	 * Sets the teste_ usuario persistence.
	 *
	 * @param teste_UsuarioPersistence the teste_ usuario persistence
	 */
	public void setTeste_UsuarioPersistence(
		Teste_UsuarioPersistence teste_UsuarioPersistence) {
		this.teste_UsuarioPersistence = teste_UsuarioPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("br.com.prodevelopment.testeconhecimento.model.Pergunta",
			perguntaLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"br.com.prodevelopment.testeconhecimento.model.Pergunta");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return Pergunta.class;
	}

	protected String getModelClassName() {
		return Pergunta.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = perguntaPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = PerguntaLocalService.class)
	protected PerguntaLocalService perguntaLocalService;
	@BeanReference(type = PerguntaPersistence.class)
	protected PerguntaPersistence perguntaPersistence;
	@BeanReference(type = RespostaLocalService.class)
	protected RespostaLocalService respostaLocalService;
	@BeanReference(type = RespostaPersistence.class)
	protected RespostaPersistence respostaPersistence;
	@BeanReference(type = Resposta_UsuarioLocalService.class)
	protected Resposta_UsuarioLocalService resposta_UsuarioLocalService;
	@BeanReference(type = Resposta_UsuarioPersistence.class)
	protected Resposta_UsuarioPersistence resposta_UsuarioPersistence;
	@BeanReference(type = TesteLocalService.class)
	protected TesteLocalService testeLocalService;
	@BeanReference(type = TestePersistence.class)
	protected TestePersistence testePersistence;
	@BeanReference(type = Teste_UsuarioLocalService.class)
	protected Teste_UsuarioLocalService teste_UsuarioLocalService;
	@BeanReference(type = Teste_UsuarioPersistence.class)
	protected Teste_UsuarioPersistence teste_UsuarioPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private PerguntaLocalServiceClpInvoker _clpInvoker = new PerguntaLocalServiceClpInvoker();
}